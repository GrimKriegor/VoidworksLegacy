#ifndef PARAM_CLASSES_H_
#define PARAM_CLASSES_H_

#include <voidworks/common.h>
#include <voidworks/param.h>

class AtkParam_Pc : public BaseParam
{
  public:
    AtkParam_Pc(uint32_t id, uintptr_t address = 0x00);
    void Hit0_Radius(float);
    void Hit1_Radius(float);
    void Hit2_Radius(float);
    void Hit3_Radius(float);
    void KnockbackDist(float);
    void HitStopTime(float);
    void SpecialEffectId0(int32_t);
    void SpecialEffectId1(int32_t);
    void SpecialEffectId2(int32_t);
    void SpecialEffectId3(int32_t);
    void SpecialEffectId4(int32_t);
    void Hit0_DmyPoly1(int16_t);
    void Hit1_DmyPoly1(int16_t);
    void Hit2_DmyPoly1(int16_t);
    void Hit3_DmyPoly1(int16_t);
    void Hit0_DmyPoly2(int16_t);
    void Hit1_DmyPoly2(int16_t);
    void Hit2_DmyPoly2(int16_t);
    void Hit3_DmyPoly2(int16_t);
    void BlowingCorrection(int16_t);
    void AtkPhysCorrection(int16_t);
    void AtkMagCorrection(int16_t);
    void AtkFireCorrection(int16_t);
    void AtkThunCorrection(int16_t);
    void AtkStamCorrection(int16_t);
    void GuardAtkRateCorrection(int16_t);
    void GuardBreakCorrection(int16_t);
    void AtkThrowEscapeCorrection(int16_t);
    void AtkSuperArmorCorrection(int16_t);
    void AtkPhys(int16_t);
    void AtkMag(int16_t);
    void AtkFire(int16_t);
    void AtkThun(int16_t);
    void AtkStam(int16_t);
    void GuardAtkRate(int16_t);
    void GuardBreakRate(int16_t);
    void AtkSuperArmor(int16_t);
    void AtkThrowEscape(int16_t);
    void AtkObj(int16_t);
    void GuardStaminaCutRate(int16_t);
    void GuardRate(int16_t);
    void ThrowTypeId(int16_t);
    void Hit0_hitType(uint8_t);
    void Hit1_hitType(uint8_t);
    void Hit2_hitType(uint8_t);
    void Hit3_hitType(uint8_t);
    void DamageLevel(uint8_t);
    void MapHitType(uint8_t);
    void GuardCutCancelRate(uint8_t);
    void AtkAttribute(uint8_t);
    void SpecialAttributes(uint8_t);
    void AttackType(uint8_t);
    void AtkMaterial(uint8_t);
    void AtkSize(uint8_t);
    void DefMaterial(uint8_t);
    void DefSfxMaterial(uint8_t);
    void HitSourceType(uint8_t);
    void ThrowFlag(uint8_t);
    void IsEffectDisabled(uint8_t);
    void DoubleDamage(uint8_t);
    void IsHitboxEnabled(uint8_t);
    void IsHitBothTeams(uint8_t);
    void IsSelfHit(uint8_t);
    void CameraActOnHit(int32_t);
    void ThrowCameraAct(int32_t);
};

class Bullet : public BaseParam
{
  public:
    Bullet(uint32_t id, uintptr_t address = 0x00);
    void AtkId_Bullet(int32_t);
    void SfxId_Bullet(int32_t);
    void SfxId_Hit(int32_t);
    void SfxId_Flick(int32_t);
    void Life(float);
    void Dist(float);
    void ShootInterval(float);
    void GravityInRange(int32_t);
    void GravityOutRange(float);
    void HormingStopRange(float);
    void InitVellocity(float);
    void AccelInRange(float);
    void AccelOutRange(float);
    void MaxVellocity(float);
    void MinVellocity(float);
    void AccelTime(float);
    void HomingBeginDist(float);
    void HitRadius(float);
    void HitRadiusMax(float);
    void SpreadTime(float);
    void ExpDelay(float);
    void HormingOffsetRange(float);
    void DmgHitRecordLifeTime(float);
    void ExternalForce(int32_t);
    void SpEffectIDForShooter(int32_t);
    void AutoSearchNPCThinkID(int32_t);
    void HitBulletID(int32_t);
    void SpEffectId0(int32_t);
    void SpEffectId1(int32_t);
    void SpEffectId2(int32_t);
    void SpEffectId3(int32_t);
    void SpEffectId4(int32_t);
    void NumShoot(int16_t);
    void HomingAngle(int16_t);
    void ShootAngle(int16_t);
    void ShootAngleInterval(int16_t);
    void ShootAngleXInterval(int16_t);
    void DamageDamp(uint8_t);
    void SpelDamageDamp(uint8_t);
    void FireDamageDamp(uint8_t);
    void ThunderDamageDamp(uint8_t);
    void StaminaDamp(uint8_t);
    void KnockbackDamp(uint8_t);
    void ShootAngleXZ(uint8_t);
    void LockShootLimitAng(uint8_t);
    void IsPenetrate(uint8_t);
    void PrevVelocityDirRate(uint8_t);
    void AtkAttribute(uint8_t);
    void SpAttribute(uint8_t);
    void Material_AttackType(uint8_t);
    void Material_AttackMaterial(uint8_t);
    void Material_Size(uint8_t);
    void LaunchConditionType(uint8_t);
    void FollowType(uint8_t);
    void EmittePosType(uint8_t);
    void IsAttackSFX(uint8_t);
    void IsEndlessHit(uint8_t);
    void CamAngleShoot(uint8_t);
    void IsSpawnAtClosestEnemy(uint8_t);
    void IsPenetrateMap(uint8_t);
    void IsHitBothTeam(uint8_t);
    void IsUseSharedHitList(uint8_t);
    void IsUseMultiDmyPolyIfPlace(uint8_t);
    void AttachEffectType(uint8_t);
    void IsHitForceBullet(uint8_t);
    void IsIgnoreSfxIfHitWater(uint8_t);
    void IsIgnoreMoveStateIfHitWater(uint8_t);
    void IsHitDarkForceBullet(uint8_t);
    void SpellParriable(uint8_t);
    void AutoFollowTarget(uint8_t);
    void DarkDamageDamp(uint8_t);
    void ConditionByte(uint8_t);
    void ConditionByte1(uint8_t);
    void Z_Homing(float);
    void HomingAngleCameraXY(float);
    void HomingAngleCameraZ(float);
    void EmitterBulletId(int32_t);
    void EmitterShootInterval(float);
    void EmitterSpawnInterval(float);
    void EmitterDelayUntilShot(float);
    void BulletCreateLimitId(uint8_t);
    void TargetHitstop(uint8_t);
    void TargetPenetrate(uint8_t);
    void FreeAim(uint8_t);
    void FollowTypeNumshoot(uint8_t);
    void ObjectId(int32_t);
    void ExtendDist(float);
    void ExtendLife(uint8_t);
    void AdjustAngle(uint8_t);
};

class EquipParamGoods : public BaseParam
{
  public:
    EquipParamGoods(uint32_t id, uintptr_t address = 0x00);
    void RefId(int32_t);
    void SfxVariationId(int32_t);
    void Weight(float);
    void BasicPrice(int32_t);
    void SellValue(int32_t);
    void BehaviorId(int32_t);
    void ReplaceItemId(int32_t);
    void SortId(int32_t);
    void QwcId(int32_t);
    void YesNoDialogMessageId(int32_t);
    void MagicId(int32_t);
    void IconId(int16_t);
    void ModelId(int16_t);
    void ShopLv(int16_t);
    void CompTrophySedId(int16_t);
    void TrophySeqId(int16_t);
    void MaxNum(int16_t);
    void ConsumeHeroPoint(uint8_t);
    void OverDexterity(uint8_t);
    void GoodsType(uint8_t);
    void RefCategory(uint8_t);
    void SpEffectCategory(uint8_t);
    void GoodsUseAnim(uint8_t);
    void OpmeMenuType(uint8_t);
    void UseLimitCategory(uint8_t);
    void ReplaceCategory(uint8_t);
    void VowType0(uint8_t);
    void VowType1(uint8_t);
    void VowType2(uint8_t);
    void VowType3(uint8_t);
    void VowType4(uint8_t);
    void VowType5(uint8_t);
    void VowType6(uint8_t);
    void VowType7(uint8_t);
    void VowType8(uint8_t);
    void VowType9(uint8_t);
    void VowType10(uint8_t);
    void VowType11(uint8_t);
    void VowType12(uint8_t);
    void VowType13(uint8_t);
    void VowType14(uint8_t);
    void VowType15(uint8_t);
    void Enable_live(uint8_t);
    void Enable_gray(uint8_t);
    void Enable_white(uint8_t);
    void Enable_black(uint8_t);
    void Enable_multi(uint8_t);
    void Disable_offline(uint8_t);
    void IsEquip(uint8_t);
    void IsConsume(uint8_t);
    void IsAutoEquip(uint8_t);
    void IsEstablishment(uint8_t);
    void IsOnlyOne(uint8_t);
    void IsDiscard(uint8_t);
    void IsDeposit(uint8_t);
    void IsDisableHand(uint8_t);
    void IsTravelItem(uint8_t);
    void IsSuppleItem(uint8_t);
    void IsFullSuppleItem(uint8_t);
    void IsEnhance1(uint8_t);
    void IsFixItem(uint8_t);
    void DisableMultiDropShare(uint8_t);
    void DisableUseAtColiseum(uint8_t);
    void DisableUseAtOutOfColiseum(uint8_t);
    void RefId2(int32_t);
    void DamageScaling(int32_t);
    void VagrantItemLotId(int32_t);
    void VagrantBonusEneDropItemLotId(int32_t);
    void VagrantItemEneDropItemLotId(int32_t);
    void SfxId(int32_t);
    void SfxId1(int32_t);
    void SfxId2(int32_t);
    void IsUse(uint8_t);
    void LadderUse(uint8_t);
    void IsUseSelected(uint8_t);
    void IsEnhanceLeft(uint8_t);
    void BlockUse(uint8_t);
    void IsDrop(uint8_t);
    void StorageMax(int16_t);
    void ShopPrice(int32_t);
    void FPCost(int16_t);
    void SpecialRestrict(uint8_t);
    void RefId1(int32_t);
};

class EquipParamWeapon : public BaseParam
{
  public:
    EquipParamWeapon(uint32_t id, uintptr_t address = 0x00);
    void BehaviorVariationId(int32_t);
    void SortId(int32_t);
    void WanderingEquipId(int32_t);
    void Weight(float);
    void WeaponWeightRate(float);
    void FixPrice(int32_t);
    void BasicPrice(int32_t);
    void SellValue(int32_t);
    void CorrectStrength(float);
    void CorrectAgility(float);
    void CorrectMagic(float);
    void CorrectFaith(float);
    void PhysGuardCutRate(float);
    void MagGuardCutRate(float);
    void FireGuardCutRate(float);
    void ThunGuardCutRate(float);
    void SpEffectBehaviorId(int32_t);
    void SpEffectBehaviorId1(int32_t);
    void SpEffectBehaviorId2(int32_t);
    void ResidentSpEffectId(int32_t);
    void ResidentSpEffectId1(int32_t);
    void ResidentSpEffectId2(int32_t);
    void MaterialSetId(int32_t);
    void OriginEquipWep(int32_t);
    void OriginEquipWep1(int32_t);
    void OriginEquipWep2(int32_t);
    void OriginEquipWep3(int32_t);
    void OriginEquipWep4(int32_t);
    void OriginEquipWep5(int32_t);
    void OriginEquipWep6(int32_t);
    void OriginEquipWep7(int32_t);
    void OriginEquipWep8(int32_t);
    void OriginEquipWep9(int32_t);
    void OriginEquipWep10(int32_t);
    void OriginEquipWep11(int32_t);
    void OriginEquipWep12(int32_t);
    void OriginEquipWep13(int32_t);
    void OriginEquipWep14(int32_t);
    void OriginEquipWep15(int32_t);
    void AntiDemonDamageRate(float);
    void AntUndeadDamageRate(float);
    void AntHollowDamageRate(float);
    void AntAbyssalDamageRate(float);
    void VagrantItemLotId(int32_t);
    void VagrantBonusEneDropItemLotId(int32_t);
    void VagrantItemEneDropItemLotId(int32_t);
    void EquipModelId(int16_t);
    void IconId(int16_t);
    void Durability(int16_t);
    void DurabilityMax(int16_t);
    void AttackThrowEscape(int16_t);
    void ParryDamageLife(int16_t);
    void AttackBasePhysics(int16_t);
    void AttackBaseMagic(int16_t);
    void AttackBaseFire(int16_t);
    void AttackBaseThunder(int16_t);
    void AttackBaseStamina(int16_t);
    void SaWeaponDamage(int16_t);
    void SaDurability(int16_t);
    void GuardAngle(int16_t);
    void StaminaGuardDef(int16_t);
    void ReinforceTypeId(int16_t);
    void TrophySGradeId(int16_t);
    void TrophySeqId(int16_t);
    void ThrowAtkRate(int16_t);
    void BowDistRate(int16_t);
    void EquipModelCategory(uint8_t);
    void EquipModelGender(uint8_t);
    void WeaponCategory(uint8_t);
    void WepmotionCategory(uint8_t);
    void GuardmotionCategory(uint8_t);
    void AtkMaterial(uint8_t);
    void DefMaterial(uint8_t);
    void DefSfxMaterial(uint8_t);
    void CorrectType(uint8_t);
    void SpAttribute(uint8_t);
    void SpAtkcategory(int16_t);
    void WepmotionOneHandId(uint8_t);
    void WepmotionBothHandId(uint8_t);
    void ProperStrength(uint8_t);
    void ProperAgility(uint8_t);
    void ProperMagic(uint8_t);
    void ProperFaith(uint8_t);
    void OverStrength(uint8_t);
    void AttackBaseParry(uint8_t);
    void DefenseBaseParry(uint8_t);
    void GuardBaseRepel(uint8_t);
    void AttackBaseRepel(uint8_t);
    void GuardCutCancelRate(uint8_t);
    void GuardLevel(uint8_t);
    void SlashGuardCutRate(uint8_t);
    void BlowGuardCutRate(uint8_t);
    void ThrustGuardCutRate(uint8_t);
    void PoisonGuardResist(uint8_t);
    void DiseaseGuardResist(uint8_t);
    void BloodGuardResist(uint8_t);
    void CurseGuardResist(uint8_t);
    void IsDurabilityDivergence(uint8_t);
    void RightHandEquipable(uint8_t);
    void LeftHandEquipable(uint8_t);
    void BothHandEquipable(uint8_t);
    void ArrowSlotEquipable(uint8_t);
    void BoltSlotEquipable(uint8_t);
    void EnableGuard(uint8_t);
    void EnableParry(uint8_t);
    void EnableMagic(uint8_t);
    void EnablePyromancy(uint8_t);
    void EnableMiracle(uint8_t);
    void EnableVowMagic(uint8_t);
    void IsNormalAttackType(uint8_t);
    void IsBlowAttackType(uint8_t);
    void IsSlashAttackType(uint8_t);
    void IsThrustAttackType(uint8_t);
    void IsEnhance(uint8_t);
    void IsLuckCorrect(uint8_t);
    void IsCustom(uint8_t);
    void DisableBaseChangeReset(uint8_t);
    void DisableRepair(uint8_t);
    void IsDarkHand(uint8_t);
    void SimpleModelForDlc(uint8_t);
    void UbytelanternWep(uint8_t);
    void IsVersusGhostWep(uint8_t);
    void BaseChangeCategory(uint8_t);
    void BaseChangeCategory1(uint8_t);
    void BaseChangeCategory2(uint8_t);
    void BaseChangeCategory3(uint8_t);
    void BaseChangeCategory4(uint8_t);
    void BaseChangeCategory5(uint8_t);
    void IsDragonSlayer(uint8_t);
    void IsDeposit(uint8_t);
    void DisableMultiDropShare(uint8_t);
    void IsDiscard(uint8_t);
    void IsDrop(uint8_t);
    void WeaponPosition(int32_t);
    void DualWeaponType(uint8_t);
    void CorrectTypeMagic(uint8_t);
    void CorrectTypeFire(uint8_t);
    void CorrectTypeThunder(uint8_t);
    void DarkGuardCutRate(float);
    void AttackBaseDark(int16_t);
    void CorrectTypeDark(uint8_t);
    void FrostGuardResist(uint8_t);
    void SwordArt(int32_t);
    void CorrectLuck(float);
    void QuiverModel(int32_t);
    void CategoryName(int16_t);
    void SfxId0(int32_t);
    void SfxId1(int32_t);
    void SfxId2(int32_t);
    void SfxId3(int32_t);
    void SfxPos0(int32_t);
    void SfxPos1(int32_t);
    void SfxPos2(int32_t);
    void SfxPos3(int32_t);
    void StaminaConsumption(float);
    void AttackElementCorrect(int32_t);
    void ShopPrice(int32_t);
    void StackSize(uint8_t);
};

class EquipParamProtector : public BaseParam
{
  public:
    EquipParamProtector(uint32_t id, uintptr_t address = 0x00);
    void SortId(int32_t);
    void WanderingEquipId(int32_t);
    void VagrantItemLotId(int32_t);
    void VagrantBonusEneDropItemLotId(int32_t);
    void VagrantItemEneDropItemLotId(int32_t);
    void FixPrice(int32_t);
    void BasicPrice(int32_t);
    void SellValue(int32_t);
    void Weight(float);
    void ResidentSpEffectId(int32_t);
    void ResidentSpEffectId2(int32_t);
    void ResidentSpEffectId3(int32_t);
    void MaterialSetId(int32_t);
    void PartsDamageRate(float);
    void CorectSARecover(float);
    void OriginEquipPro(int32_t);
    void OriginEquipPro1(int32_t);
    void OriginEquipPro2(int32_t);
    void OriginEquipPro3(int32_t);
    void OriginEquipPro4(int32_t);
    void OriginEquipPro5(int32_t);
    void OriginEquipPro6(int32_t);
    void OriginEquipPro7(int32_t);
    void OriginEquipPro8(int32_t);
    void OriginEquipPro9(int32_t);
    void OriginEquipPro10(int32_t);
    void OriginEquipPro11(int32_t);
    void OriginEquipPro12(int32_t);
    void OriginEquipPro13(int32_t);
    void OriginEquipPro14(int32_t);
    void OriginEquipPro15(int32_t);
    void FaceScaleM_ScaleX(float);
    void FaceScaleM_ScaleZ(float);
    void FaceScaleM_MaxX(float);
    void FaceScaleM_MaxZ(float);
    void FaceScaleF_ScaleX(float);
    void FaceScaleF_ScaleZ(float);
    void FaceScaleF_MaxX(float);
    void FaceScaleF_MaxZ(float);
    void QwcId(int32_t);
    void EquipModelId(int16_t);
    void IconIdM(int16_t);
    void IconIdF(int32_t);
    void KnockbackBounceRate(int16_t);
    void Durability(int16_t);
    void DurabilityMax(int16_t);
    void SaDurability(int16_t);
    void DefFlickPower(int16_t);
    void DefensePhysics(int16_t);
    void DefenseMagic(int16_t);
    void DefenseFire(int16_t);
    void DefenseThunder(int16_t);
    void DefenseSlash(int16_t);
    void DefenseBlow(int16_t);
    void DefenseThrust(int16_t);
    void ResistPoison(int16_t);
    void ResistDisease(int16_t);
    void ResistBlood(int16_t);
    void ResistCurse(int16_t);
    void ReinforceTypeId(int16_t);
    void TrophySGradeId(int16_t);
    void ShopLv(int16_t);
    void KnockbackParamId(uint8_t);
    void FlickDamageCutRate(uint8_t);
    void EquipModelCategory(uint8_t);
    void EquipModelGender(uint8_t);
    void ProtectorCategory(uint8_t);
    void DefenseMaterial(uint8_t);
    void DefenseMaterialSfx(uint8_t);
    void PartsDmgType(uint8_t);
    void DefenseMaterial_Weak(uint8_t);
    void DefenseMaterialSfx_Weak(uint8_t);
    void IsDiscard(uint8_t);
    void IsDrop(uint8_t);
    void AbsorbtionPhysical(float);
    void AbsorbtionSlash(float);
    void AbsorbtionStrike(float);
    void AbsorbtionThrust(float);
    void AbsorbtionMagic(float);
    void AbsorbtionFire(float);
    void AbsorbtionThunder(float);
    void Poise(float);
    void AbsorbtionDark(float);
    void DefenseDark(int16_t);
    void ShopPrice(int32_t);
    void ResistFrost(int16_t);
};

class SpEffectParam : public BaseParam
{
  public:
    SpEffectParam(uint32_t id, uintptr_t address = 0x00);
    void IconId(int32_t);
    void ConditionHp(float);
    void EffectEndurance(float);
    void MotionInterval(float);
    void MaxHpRate(float);
    void MaxMpRate(float);
    void MaxStaminaRate(float);
    void SlashDamageCutRate(float);
    void BlowDamageCutRate(float);
    void ThrustDamageCutRate(float);
    void NeutralDamageCutRate(float);
    void MagicDamageCutRate(float);
    void FireDamageCutRate(float);
    void ThunderDamageCutRate(float);
    void PhysicsAttackRate(float);
    void MagicAttackRate(float);
    void FireAttackRate(float);
    void ThunderAttackRate(float);
    void PhysicsAttackPowerRate(float);
    void MagicAttackPowerRate(float);
    void FireAttackPowerRate(float);
    void ThunderAttackPowerRate(float);
    void PhysicsAttackPower(int32_t);
    void MagicAttackPower(int32_t);
    void FireAttackPower(int32_t);
    void ThunderAttackPower(int32_t);
    void PhysicsDiffenceRate(float);
    void MagicDiffenceRate(float);
    void FireDiffenceRate(float);
    void ThunderDiffenceRate(float);
    void PhysicsDiffence(int32_t);
    void MagicDiffence(int32_t);
    void FireDiffence(int32_t);
    void ThunderDiffence(int32_t);
    void NoGuardDamageRate(float);
    void VitalSpotChangeRate(float);
    void NormalSpotChangeRate(float);
    void MaxHpChangeRate(float);
    void BehaviorId(int32_t);
    void ChangeHpRate(float);
    void ChangeHpPoint(int32_t);
    void ChangeMpRate(float);
    void ChangeMpPoint(int32_t);
    void MpRecoverChangeSpeed(int32_t);
    void ChangeStaminaRate(float);
    void ChangeStaminaPoint(int32_t);
    void StaminaRecoverChangeSpeed(int32_t);
    void MagicEffectTimeChange(float);
    void InsideDurability(int32_t);
    void MaxDurability(int32_t);
    void StaminaAttackRate(float);
    void PoizonAttackPower(int32_t);
    void RegistIllness(int32_t);
    void RegistBlood(int32_t);
    void RegistCurse(int32_t);
    void FallDamageRate(float);
    void SoulRate(float);
    void EquipWeightChangeRate(float);
    void AllItemWeightChangeRate(float);
    void Soul(int32_t);
    void AnimIdOffset(int32_t);
    void HaveSoulRate(float);
    void TargetPriority(float);
    void SightSearchEnemyCut(int32_t);
    void HearingSearchEnemyCut(float);
    void GrabityRate(float);
    void RegistPoizonChangeRate(float);
    void RegistIllnessChangeRate(float);
    void RegistBloodChangeRate(float);
    void RegistCurseChangeRate(float);
    void SoulStealRate(float);
    void LifeReductionRate(float);
    void HpRecoverRate(float);
    void ReplaceSpEffectId(int32_t);
    void CycleOccurrenceSpEffectId(int32_t);
    void AtkOccurence(int32_t);
    void GuardDefFlickPowerRate(float);
    void GuardStaminaCutRate(float);
    void RayCastPassedTime(int16_t);
    void ChangeSuperArmorPoint(int16_t);
    void BowDistRate(int16_t);
    void SpCategory(int16_t);
    void CategoryPriority(uint8_t);
    void SaveCategory(uint8_t);
    void ChangeMagicSlot(uint8_t);
    void ChangeMiracleSlot(uint8_t);
    void HeroPointDamage(uint8_t);
    void DefFlickPower(uint8_t);
    void FlickDamageCutRate(uint8_t);
    void BloodDamageRate(uint8_t);
    void DmgLv_None(uint8_t);
    void DmgLv_S(uint8_t);
    void DmgLv_M(uint8_t);
    void DmgLv_L(uint8_t);
    void DmgLv_BlowM(uint8_t);
    void DmgLv_Push(uint8_t);
    void DmgLv_Strike(uint8_t);
    void DmgLv_BlowS(uint8_t);
    void DmgLv_Min(uint8_t);
    void DmgLv_Uppercut(uint8_t);
    void DmgLv_BlowLL(uint8_t);
    void DmgLv_Breath(uint8_t);
    void AtkAttribute(uint8_t);
    void SpAttribute(uint8_t);
    void StateInfo(int16_t);
    void WepParamChange(uint8_t);
    void MoveType(uint8_t);
    void LifeReductionType(uint8_t);
    void ThrowCondition(uint8_t);
    void AddBehaviorJudgeId_condition(uint8_t);
    void AddBehaviorJudgeId_add(uint8_t);
    void TargetSelf(uint8_t);
    void TargetFriend(uint8_t);
    void TargetEnemy(uint8_t);
    void TargetPlayer(uint8_t);
    void TargetAI(uint8_t);
    void TargetLive(uint8_t);
    void TargetGhost(uint8_t);
    void TargetWhiteGhost(uint8_t);
    void TargetBlackGhost(uint8_t);
    void TargetAttacker(uint8_t);
    void DispIconNonactive(uint8_t);
    void UseSpEffectEffect(uint8_t);
    void BAdjustMagicAblity(uint8_t);
    void BAdjustFaithAblity(uint8_t);
    void BGameClearBonus(uint8_t);
    void MagParamChange(uint8_t);
    void MiracleParamChange(uint8_t);
    void ClearSoul(uint8_t);
    void RequestSOS(uint8_t);
    void RequestBlackSOS(uint8_t);
    void RequestForceJoinBlackSOS(uint8_t);
    void RequestKickSession(uint8_t);
    void RequestLeaveSession(uint8_t);
    void RequestNpcInveda(uint8_t);
    void NoDead(uint8_t);
    void BCurrHPIndependeMaxHP(uint8_t);
    void CorrosionIgnore(uint8_t);
    void SightSearchCutIgnore(uint8_t);
    void HearingSearchCutIgnore(uint8_t);
    void AntiMagicIgnore(uint8_t);
    void FakeTargetIgnore(uint8_t);
    void FakeTargetIgnoreUndead(uint8_t);
    void FakeTargetIgnoreAnimal(uint8_t);
    void GrabityIgnore(uint8_t);
    void DisablePoison(uint8_t);
    void DisableDisease(uint8_t);
    void DisableBlood(uint8_t);
    void DisableCurse(uint8_t);
    void EnableCharm(uint8_t);
    void EnableLifeTime(uint8_t);
    void HasTarget(uint8_t);
    void IsFireDamageCancel(uint8_t);
    void IsExtendSpEffectLife(uint8_t);
    void RequestLeaveColiseumSession(uint8_t);
    void VowType0(uint8_t);
    void VowType1(uint8_t);
    void VowType2(uint8_t);
    void VowType3(uint8_t);
    void VowType4(uint8_t);
    void VowType5(uint8_t);
    void VowType6(uint8_t);
    void VowType7(uint8_t);
    void VowType8(uint8_t);
    void VowType9(uint8_t);
    void VowType10(uint8_t);
    void VowType11(uint8_t);
    void VowType12(uint8_t);
    void VowType13(uint8_t);
    void VowType14(uint8_t);
    void VowType15(uint8_t);
    void RestrictFlags(uint8_t);
    void BehaviorFireFrom(uint8_t);
    void EffectSfx(int32_t);
    void TriggerEffect(int32_t);
    void TriggerRequirement(int32_t);
    void EffectSfx1(int32_t);
    void RegistFrost(int32_t);
    void DarkDamageCutRate(float);
    void DarkDiffenceRate(float);
    void DarkDiffence(float);
    void DarkAttackPowerRate(float);
    void DarkAttackPower(int32_t);
    void ItemDiscovery(float);
    void PvpAbsorbtionPhys(float);
    void PvpAbsorbtionMag(float);
    void PvpAbsorbtionFire(float);
    void PvpAbsorbtionThun(float);
    void PvpAbsorbtionDark(float);
    void PveAbsorbtionPhys(float);
    void PveAbsorbtionMag(float);
    void PveAbsorbtionFire(float);
    void PveAbsorbtionThun(float);
    void PveAbsorbtionDark(float);
    void PvpAttackPhys(float);
    void PvpAttackMag(float);
    void PvpAttackFire(float);
    void PvpAttackThun(float);
    void PvpAttackDark(float);
    void RegistFrostChange(int32_t);
    void PyroParamChange(uint8_t);
    void CastDexterity(uint8_t);
    void MagicMpCost(float);
    void PyroMpCost(float);
    void MiracleMpCost(float);
    void EstusHpRate(int32_t);
    void EstusHpPoint(int32_t);
    void EstusMpRate(int32_t);
    void EtsusMpPoint(int32_t);
    void EstusMult(float);
    void AshenMult(float);
    void Vigor(uint8_t);
    void Attunement(uint8_t);
    void Endurance(uint8_t);
    void Vitality(uint8_t);
    void Strength(uint8_t);
    void Dexterity(uint8_t);
    void Intelligence(uint8_t);
    void Faith(uint8_t);
    void Luck(uint8_t);
    void VigorBuff(uint8_t);
    void AttunementBuff(uint8_t);
    void EnduranceBuff(uint8_t);
    void VitalityBuff(uint8_t);
    void StrenghtBuff(uint8_t);
    void DextrerityBuff(uint8_t);
    void IntelligenceBuff(uint8_t);
    void FaithBuff(uint8_t);
    void LuckBuff(uint8_t);
};

class SpEffectVfxParam : public BaseParam
{
  public:
    SpEffectVfxParam(uint32_t id, uintptr_t address = 0x00);
    void MidstSfxID(int32_t);
    void MidstSeID(int32_t);
    void InitSfxID(int32_t);
    void InitSeID(int32_t);
    void FinishSfxID(int32_t);
    void FinishSeID(int32_t);
    void CamouflageBeginDist(float);
    void CamouflageEndDist(float);
    void TransformProtectorID(int32_t);
    void MidstDmyID(int16_t);
    void InitDmyID(int16_t);
    void FinishDmyID(int16_t);
    void EffectType(uint8_t);
    void SoulParamIDForWepEnchant(uint8_t);
    void PlayCategory(uint8_t);
    void PlayPriority(uint8_t);
    void ExistEffectForLarge(uint8_t);
    void ExistEffectForSoul(uint8_t);
    void EffectInvisibleAtCamouflage(uint8_t);
    void UseCamouflage(uint8_t);
    void InvisibleAtFriendCamouflage(uint8_t);
    void AddMapAreaBlock(uint8_t);
    void HalfCamouflage(uint8_t);
    void IsFullBodyTransformProtectorID(uint8_t);
    void IsInvisibleWeapon(uint8_t);
    void IsSilence(uint8_t);
};

class EquipParamAccessory : public BaseParam
{
  public:
    EquipParamAccessory(uint32_t id, uintptr_t address = 0x00);
    void RefId1(int32_t);
    void SfxVariation(int32_t);
    void Weight(float);
    void BehaviorId(int32_t);
    void BasicPrice(int32_t);
    void SellValue(int32_t);
    void SortId(int32_t);
    void QwcId(int32_t);
    void EquipModelId(int16_t);
    void IconId(int16_t);
    void ShopLv(int16_t);
    void TrophySGradeId(int16_t);
    void TrophySeqId(int16_t);
    void EquipModelCategory(uint8_t);
    void EquipModelGender(uint8_t);
    void AccessoryCategory(uint8_t);
    void RefCategory(uint8_t);
    void SpEffectCategory(uint8_t);
    void IsDiscard(uint8_t);
    void IsDrop(uint8_t);
    void Covenant(uint8_t);
    void RefId2(int32_t);
    void RefId3(int32_t);
    void RefId4(int32_t);
    void RefId6(int32_t);
};

class BonfireWarpParam : public BaseParam
{
  public:
    BonfireWarpParam(uint32_t id = 0x00, uintptr_t address = 0x00);
};

class NetworkParam : public BaseParam
{
  public:
    NetworkParam(uint32_t id = 0x00, uintptr_t address = 0x00);
    void AbyssMultiplayLimit(uint8_t);
    void AllAreaSearchRate_BellGuard(uint8_t);
    void AllAreaSearchRate_CoopBlue(uint8_t);
    void AllAreaSearchRate_VsBlue(uint8_t);
    void AvatarMatchSearchMax(int32_t);
    void BasicExclusiveHeight(float);
    void BasicExclusiveRange(float);
    void BattleRoyalMatchSearchMax(int32_t);
    void BattleRoyalMatchSearchMin(int32_t);
    void BlackKeywordLimitTimeScale(float);
    void BloodMessageDisplayMax(uint8_t);
    void BloodMessageEvalHealRate(uint8_t);
    void BloodStainDisplayMax(uint8_t);
    void BreakInRequestIntervalTimeSec(float);
    void BreakInRequestTimeOutSec(float);
    void CellGroupBottomRange(int32_t);
    void CellGroupHorizontalRange(int32_t);
    void CellGroupTopRange(int32_t);
    void DarkPhantomLimitBoostScale(float);
    void DarkPhantomLimitBoostTime(float);
    void DeadingGhostStartPosThreshold(float);
    void DistanceOfBeginRecordVersus(float);
    void DistanceOfEndRecordVersus(float);
    void DoorInvalidPlayAreaExtents(float);
    void DownloadEvaluationSpan(float);
    void DownloadSpan(float);
    void DragonKeywordLimitTimeScale(float);
    void GuestPlayerNoTimeOutTime(float);
    void GuestUpdateTime(float);
    void HostPlayerNoTimeOutTime(float);
    void HostRegisterUpdateTime(float);
    void KeyGuideHeightPlayer(float);
    void KeyGuideRange(float);
    void KeyGuideRangePlayer(float);
    void MaxBellGuardSummonCount(int32_t);
    void MaxBonfireGhostValidRange(float);
    void MaxBreakInTargetListCount(int32_t);
    void MaxCoopBlueSummonCount(int32_t);
    void MaxGhostTotalCount(int32_t);
    void MaxReadSignCount(int32_t);
    void MaxReplayIntervalTime(float);
    void MaxSignCellCount(int32_t);
    void MaxSignPosCorrectionRange(float);
    void MaxSignTotalCount(int32_t);
    void MaxVisitListCount(int32_t);
    void MaxWriteSignCount(int32_t);
    void MinBonfireGhostValidRange(float);
    void MinReplayIntervalTime(float);
    void MinSmallPhantomLimitTimeScale(float);
    void MinWhitePhantomLimitTimeScale(float);
    void MultiplayDisableLifeTime(float);
    void PenaltyForgiveItemLimitTime(float);
    void PenaltyPointBeginPenalize(int16_t);
    void PenaltyPointLanDisconnect(int16_t);
    void PenaltyPointReboot(int16_t);
    void PenaltyPointSignout(int16_t);
    void PhantomReturnDelayTime(uint8_t);
    void PhantomWarpMinimumTime(uint8_t);
    void PreviewChrWaitingTime(float);
    void RecordDeadingGhostMinTime(float);
    void RecordDeadingGhostTotalTime(float);
    void RecordWanderingGhostMinTime(float);
    void RecordWanderingGhostTime(float);
    void ReloadGhostCellCount(int32_t);
    void ReloadGhostIntervalTime(float);
    void ReloadGhostTotalCount(int32_t);
    void ReloadNewSignCellCount(int32_t);
    void ReloadRandomSignCellCount(int32_t);
    void ReloadSearch_BellGuard_Max(float);
    void ReloadSearch_BellGuard_Min(float);
    void ReloadSearch_CoopBlue_Max(float);
    void ReloadSearch_CoopBlue_Min(float);
    void ReloadSearch_RatKing_Max(float);
    void ReloadSearch_RatKing_Min(float);
    void ReloadSignCellCount(int32_t);
    void ReloadSignIntervalTime(float);
    void ReloadSignIntervalTime1(float);
    void ReloadSignIntervalTime2(float);
    void ReloadSignTotalCount(int32_t);
    void ReloadVisitListCoolTime(float);
    void ReplayBonfireGhostTime(float);
    void ReplayBonfireModeRange(float);
    void ReplayBonfirePhantomParamId(int32_t);
    void ReplayBonfirePhantomParamIdForCodename(int32_t);
    void ReplayGhostRangeOnView(float);
    void ReplayGhostRangeOutView(float);
    void RequestSearchQuickMatchLimit(int32_t);
    void SignDisplayMax(uint8_t);
    void SignDownloadSpan(float);
    void SignPuddleActiveMessageIntervalSec(float);
    void SignUpdateSpan(float);
    void SignVerticalOffset(float);
    void SignVisibleRange(float);
    void SingGetMax(int32_t);
    void SmallGoldSuccessHostRewardId(int32_t);
    void SmallKeywordLimitTimeScale(float);
    void SrttMaxLimit(float);
    void SrttMeanDeviationLimit(float);
    void SrttMeanLimit(float);
    void StatueCreatableDistance(float);
    void SummonMessageInterval(float);
    void TerminateTimeoutTime(uint8_t);
    void UpdateBonfireGhostIntervalTime(float);
    void UpdateSignIntervalTime(float);
    void UpdateVersusGhostIntervalTime(float);
    void UpdateWanderGhostIntervalTime(float);
    void VisitorGuestRequestMessageIntervalSec(float);
    void VisitorListMax(int32_t);
    void WanderGhostIntervalLifeTime(float);
    void WhiteKeywordLimitTimeScale(float);
    void YellowMonkDownloadSpan(float);
    void YellowMonkOverallFlowTimeOutTime(float);
};

class PlayRegionParam : public BaseParam
{
  public:
   PlayRegionParam(uint32_t id, uintptr_t address = 0x00);
   void MultiPlayZoneId(int32_t);
   void MultiPlayStartLimitEventFlagId(int32_t);
   void OtherDisableDistance(float);
   void PcPositionSaveLimitEventFlagId(int32_t);
   void MultiPlayHostLimitEventFlagId(int32_t);
   void DisolvedEventFlag(int16_t);
   void LoadOfCinder(uint8_t);
   void IsEnableEvent(uint8_t);
   void BonfireEventId0(int32_t);
   void BonfireEventId1(int32_t);
   void BonfireEventId2(int32_t);
   void BonfireEventId3(int32_t);
   void BonfireEventId4(int32_t);
   void BonfireEventId5(int32_t);
   void BonfireEventId6(int32_t);
   void BonfireEventId7(int32_t);
   void BonfireEventId8(int32_t);
   void BonfireEventId9(int32_t);
   void EnableBloodMessage(uint8_t);
   void EnableBloodstain(uint8_t);
   void EnableGhost(uint8_t);
};

class EquipMtrlSetParam : public BaseParam
{
  public:
    EquipMtrlSetParam(uint32_t id = 0x00, uintptr_t address = 0x00);
};

class LodParam : public BaseParam
{
  public:
    LodParam(uint32_t id = 0x00, uintptr_t address = 0x00);
    void Lv01_BorderDist(float);
    void Lv01_PlayDist(float);
    void Lv12_BorderDist(float);
    void Lv12_PlayDist(float);
    void TextureLod(uint8_t);
    void Lv23_BorderDist(float);
    void Lv23_PlayDist(float);
    void Lv34_BorderDist(float);
    void Lv34_PlayDist(float);
    void Lv45_BorderDist(float);
    void Lv45_PlayDist(float);
    void DistanceScaleId(uint8_t);
};

class CeremonyParam: public BaseParam
{
  public:
    CeremonyParam(uint32_t id = 0x00, uintptr_t address = 0x00);
    void EventLayerID(int32_t);
    void MapStudioLayerID(int32_t);
    void GparamID_Up(int16_t);
    void GparamID_Low(int16_t);
    void PointCloudID(int32_t);
    void Gl_TextureID(int32_t);
    void LightGroupID(int32_t);
    void IsReload(uint8_t);
    void IsDisableOnline(uint8_t);
};

#endif
